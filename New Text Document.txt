import pandas as pd matches = pd.read_csv("matches.csv", index_col=0) matches.head() matches.shape

2 seasons * 20 squads * 38 matches
2 * 20 * 38

Missing Liverpool 2021-2022
matches["team"].value_counts()

matches[matches["team"] == "Liverpool"].sort_values("date")

matches["round"].value_counts()

matches.dtypes

del matches["comp"] del matches["notes"] matches["date"] = pd.to_datetime(matches["date"]) matches["target"] = (matches["result"] == "W").astype("int") matches matches["venue_code"] = matches["venue"].astype("category").cat.codes matches["opp_code"] = matches["opponent"].astype("category").cat.codes matches["hour"] = matches["time"].str.replace(":.+", "", regex=True).astype("int") matches["day_code"] = matches["date"].dt.dayofweek matches from sklearn.ensemble import RandomForestClassifier rf = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1) train = matches[matches["date"] < '2022-01-01']

test = matches[matches["date"] > '2022-01-01'] predictors = ["venue_code", "opp_code", "hour", "day_code"] rf.fit(train[predictors], train["target"]) preds = rf.predict(test[predictors]) from sklearn.metrics import accuracy_score error = accuracy_score(test["target"], preds) error combined = pd.DataFrame(dict(actual=test["target"], predicted=preds)) pd.crosstab(index=combined["actual"], columns=combined["predicted"]) from sklearn.metrics import precision_score

precision_score(test["target"], preds) grouped_matches = matches.groupby("team") group = grouped_matches.get_group("Manchester City").sort_values("date")

def rolling_averages(group, cols, new_cols): group = group.sort_values("date") rolling_stats = group[cols].rolling(3, closed='left').mean() group[new_cols] = rolling_stats group = group.dropna(subset=new_cols) return group

cols = ["gf", "ga", "sh", "sot", "dist", "fk", "pk", "pkatt"] new_cols = [f"{c}_rolling" for c in cols]

rolling_averages(group, cols, new_cols)

matches_rolling = matches.groupby("team").apply(lambda x: rolling_averages(x, cols, new_cols))

matches_rolling

matches_rolling = matches_rolling.droplevel('team')

matches_rolling

matches_rolling.index = range(matches_rolling.shape[0])

def make_predictions(data, predictors): train = data[data["date"] < '2022-01-01'] test = data[data["date"] > '2022-01-01'] rf.fit(train[predictors], train["target"]) preds = rf.predict(test[predictors]) combined = pd.DataFrame(dict(actual=test["target"], predicted=preds), index=test.index) error = precision_score(test["target"], preds) return combined, error

combined, error = make_predictions(matches_rolling, predictors + new_cols)

error

combined = combined.merge(matches_rolling[["date", "team", "opponent", "result"]], left_index=True, right_index=True)

combined.head(10)

class MissingDict(dict): missing = lambda self, key: key

map_values = {"Brighton and Hove Albion": "Brighton", "Manchester United": "Manchester Utd", "Newcastle United": "Newcastle Utd", "Tottenham Hotspur": "Tottenham", "West Ham United": "West Ham", "Wolverhampton Wanderers": "Wolves"} mapping = MissingDict(**map_values)

combined["new_team"] = combined["team"].map(mapping)

merged = combined.merge(combined, left_on=["date", "new_team"], right_on=["date", "opponent"])

merged

merged[(merged["predicted_x"] == 1) & (merged["predicted_y"] ==0)]["actual_x"].value_counts()







Rekomendasi Perbaikan
Pemilihan Fitur yang Lebih Baik
python
Insert Code
Edit
Copy code
predictors = [
    "venue_code", 
    "opp_code", 
    "hour", 
    "day_code",
    # Tambahkan rolling averages
    "gf_rolling", 
    "ga_rolling", 
    "sh_rolling", 
    "sot_rolling"
]
Hyperparameter Tuning
python
Insert Code
Edit
Copy code
from sklearn.model_selection import GridSearchCV

# Contoh parameter yang bisa diuji
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(
    RandomForestClassifier(random_state=1), 
    param_grid, 
    cv=5
)

grid_search.fit(train[predictors], train["target"])
best_model = grid_search.best_estimator_
Cross-Validation
python
Insert Code
Edit
Copy code
from sklearn.model_selection import cross_val_score

# Validasi silang
cv_scores = cross_val_score(
    rf, 
    matches_rolling[predictors], 
    matches_rolling["target"], 
    cv=5
)

print("Rata-rata akurasi CV:", cv_scores.mean())
print("Standar deviasi akurasi:", cv_scores.std())
Evaluasi Model
python
Insert Code
Edit
Copy code
from sklearn.metrics import (
    accuracy_score, 
    precision_score, 
    recall_score, 
    f1_score, 
    confusion_matrix
)

# Prediksi
preds = rf.predict(test[predictors])

# Berbagai metrik evaluasi
print("Akurasi:", accuracy_score(test["target"], preds))
print("Presisi:", precision_score(test["target"], preds))
print("Recall:", recall_score(test["target"], preds))
print("F1 Score:", f1_score(test["target"], preds))

# Confusion Matrix
conf_matrix = confusion_matrix(test["target"], preds)
print("Confusion Matrix:\n", conf_matrix)
Dengan pendekatan ini, Anda tidak hanya memilih dan melatih model, tetapi juga melakukan validasi dan evaluasi yang komprehensif untuk memastikan performa model yang baik.